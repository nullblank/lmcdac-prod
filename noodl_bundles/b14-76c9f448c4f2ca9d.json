[{"name":"/Update Profile Loggedin","nodes":[{"id":"08392544-80e8-bfc5-8a43-c1e66b3388be","type":"Page","parameters":{},"ports":[],"children":[{"id":"812768aa-5af7-5376-9856-0112174dd551","type":"Group","parameters":{},"ports":[],"children":[{"id":"f22e2633-8b63-1f5a-53ee-6065dc0ab34f","type":"Group","parameters":{"marginLeft":{"value":24,"unit":"px"},"marginRight":{"value":24,"unit":"px"},"marginTop":{"value":24,"unit":"px"}},"ports":[],"children":[{"id":"8081da95-2be6-ffd9-ab15-e71136e4cb6e","type":"net.noodl.visual.columns","parameters":{"justifyContent":"center","minWidth":{"value":320,"unit":"px"}},"ports":[],"children":[{"id":"028fca32-e10a-749f-0dbb-09789243fde0","type":"Group","parameters":{"paddingLeft":{"value":24,"unit":"px"},"paddingRight":{"value":24,"unit":"px"},"paddingTop":{"value":24,"unit":"px"},"paddingBottom":{"value":24,"unit":"px"},"backgroundColor":"Main Blue","borderRadius":{"value":5,"unit":"px"},"borderStyle":"solid","borderWidth":{"value":1,"unit":"px"},"borderColor":"Depressive Blue","sizeMode":"explicit"},"ports":[],"children":[{"id":"e8a69535-bebd-3859-e91e-bfeccbdad42d","type":"net.noodl.controls.textinput","parameters":{"label":"ID Number","type":"number","placeholder":"####","sizeMode":"explicit","backgroundColor":"Deep Blue","color":"Selection Yellow","labelcolor":"White","borderColor":"Depressive Blue","marginTop":{"value":8,"unit":"px"}},"ports":[],"children":[]},{"id":"38541961-8943-e064-114a-bc90ff591d2d","type":"Group","parameters":{"flexDirection":"row","sizeMode":"explicit"},"ports":[],"children":[{"id":"c15de6b5-6a76-4b6f-028c-ba128e8a9628","type":"net.noodl.visual.columns","parameters":{"layoutString":"1 1","justifyContent":"center"},"ports":[],"children":[{"id":"bef1b0d2-a4a4-01a8-8a36-11f76f5e3bd8","type":"net.noodl.controls.textinput","parameters":{"label":"First Name","type":"text","placeholder":"John Doe","sizeMode":"explicit","backgroundColor":"Deep Blue","color":"Selection Yellow","labelcolor":"White","borderColor":"Depressive Blue","marginTop":{"value":8,"unit":"px"}},"ports":[],"children":[]},{"id":"1a5fd9c8-aa63-aaef-50a8-cbd12c44f8d4","type":"net.noodl.controls.textinput","parameters":{"label":"Last Name","type":"text","placeholder":"Johnsson","sizeMode":"explicit","backgroundColor":"Deep Blue","color":"Selection Yellow","labelcolor":"White","borderColor":"Depressive Blue","marginTop":{"value":8,"unit":"px"}},"ports":[],"children":[]}]}]},{"id":"9023f658-31f3-b087-5cab-8a385f7a9ce1","type":"Group","parameters":{"flexDirection":"row"},"ports":[],"children":[{"id":"8f789976-7ad9-05b0-cf18-d0797a40dd5a","type":"net.noodl.controls.checkbox","parameters":{"marginTop":{"value":24,"unit":"px"},"label":"Are you Faculty?","labelcolor":"Selection Yellow","borderColor":"Depressive Blue"},"ports":[],"children":[]},{"id":"f8b2cae1-04f0-e56b-af53-20c7c14e62f0","type":"net.noodl.controls.checkbox","parameters":{"marginTop":{"value":24,"unit":"px"},"label":"Do you have a PhD?","labelcolor":"Selection Yellow","borderColor":"Depressive Blue"},"ports":[],"children":[]}]},{"id":"989b871b-b0f0-bd60-fb69-916db49a2b27","type":"Group","parameters":{"flexDirection":"row"},"ports":[],"children":[{"id":"5df2be93-7dee-f634-8b60-573e15a69468","type":"net.noodl.controls.options","parameters":{"color":"Selection Yellow","borderColor":"Depressive Blue","placeholder":"Select Office Location","labelcolor":"White","label":"Select Office","sizeMode":"explicit","width":{"value":100,"unit":"%","isFixed":false},"iconColor":"Grey - 600","items":"[\n\n]","textTransform":"none","fontSize":{"value":16,"unit":"px"},"height":{"value":55,"unit":"px"},"marginTop":{"value":24,"unit":"px"},"backgroundColor":"Not-so Deep Blue","marginLeft":{"value":0,"unit":"px"},"marginRight":{"value":0,"unit":"px"}},"ports":[],"children":[]}]},{"id":"a794d407-e382-20ae-f926-8f1d74fd3939","type":"net.noodl.controls.button","parameters":{"marginTop":{"value":24,"unit":"px"},"sizeMode":"explicit","label":"Update Account Details","backgroundColor":"Not-so Deep Blue","borderStyle":"solid","borderColor":"Depressive Blue","borderWidth":{"value":1,"unit":"px"}},"ports":[],"children":[]}]}]}]}]}]},{"id":"553e014c-c709-ebef-5c4d-fa8bf7a8a4ca","type":"PageInputs","parameters":{},"ports":[],"children":[]},{"id":"95d85871-ef77-8494-7b70-f151e4a4fd30","type":"JavaScriptFunction","parameters":{"functionScript":"try {\r\n  // Retrieve records from the 'categories' table\r\n  const {data, error} = await Noodl.Variables.supabaselocal.from('office')\r\n  .select('id, desc'); // Retrieve records from the 'categories' table\r\n\r\n  // Create a JSON array to store the rows\r\n  const jsonArray = [];\r\n\r\n  // Iterate through the rows and assign 'desc' to 'Label' and 'id' to 'Value'\r\n  data.forEach(row => {\r\n    const jsonRow = {\r\n      Label: row.desc,\r\n      Value: row.id\r\n    };\r\n    jsonArray.push(jsonRow);\r\n  });\r\n\r\n  // Output the JSON array\r\n  Outputs.JsonArray = jsonArray;\r\n  Outputs.label = \"Select Office\";\r\n  Outputs.IsDone = true;\r\n  Outputs.Success();\r\n\r\n  \r\n} catch (error) {\r\n  console.log(\"getActivities: ERROR : \", error);\r\n  Outputs.Error = error;\r\n  Outputs.IsDone = false;\r\n  Outputs.Failure();\r\n  return;\r\n}\r\n"},"ports":[{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":4},{"name":"out-Failure","displayName":"Failure","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-JsonArray","displayName":"JsonArray","plug":"output","type":"*","group":"Outputs","index":6},{"name":"out-label","displayName":"label","plug":"output","type":"*","group":"Outputs","index":7},{"name":"out-IsDone","displayName":"IsDone","plug":"output","type":"*","group":"Outputs","index":8},{"name":"out-Error","displayName":"Error","plug":"output","type":"*","group":"Outputs","index":9}],"children":[]},{"id":"c67acab4-0fe1-f34c-6bf6-e2684f0d4a89","type":"JavaScriptFunction","parameters":{"functionScript":"try {\r\n  // Retrieve records from the 'categories' table\r\n  const {data, error} = await Noodl.Variables.supabaselocal.from('department')\r\n  .select('id, desc'); // Retrieve records from the 'categories' table\r\n\r\n  // Create a JSON array to store the rows\r\n  const jsonArray = [];\r\n\r\n  // Iterate through the rows and assign 'desc' to 'Label' and 'id' to 'Value'\r\n  data.forEach(row => {\r\n    const jsonRow = {\r\n      Label: row.desc,\r\n      Value: row.id\r\n    };\r\n    jsonArray.push(jsonRow);\r\n  });\r\n\r\n  // Output the JSON array\r\n  Outputs.JsonArray = jsonArray;\r\n  Outputs.label = \"Select School\";\r\n  Outputs.IsDone = true;\r\n  Outputs.Success();\r\n\r\n  \r\n} catch (error) {\r\n  console.log(\"getActivities: ERROR : \", error);\r\n  Outputs.Error = error;\r\n  Outputs.IsDone = false;\r\n  Outputs.Failure();\r\n  return;\r\n}\r\n"},"ports":[{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":4},{"name":"out-Failure","displayName":"Failure","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-JsonArray","displayName":"JsonArray","plug":"output","type":"*","group":"Outputs","index":6},{"name":"out-label","displayName":"label","plug":"output","type":"*","group":"Outputs","index":7},{"name":"out-IsDone","displayName":"IsDone","plug":"output","type":"*","group":"Outputs","index":8},{"name":"out-Error","displayName":"Error","plug":"output","type":"*","group":"Outputs","index":9}],"children":[]},{"id":"a84e0a2b-688a-5b2c-c623-a39610765ea1","type":"Condition","parameters":{},"ports":[],"children":[]},{"id":"c716058d-431f-66aa-4bfc-79a9aa9df671","type":"Model2","parameters":{"modelId":"currentUser","properties":"profile"},"ports":[],"children":[]},{"id":"a4352b25-1316-a1bd-203a-9c66bab96888","type":"Model2","parameters":{"properties":"first_name,last_name,user_id,is_phd"},"ports":[],"children":[]},{"id":"9ee01d33-5de3-0a8a-ea98-d8d4918fe5c8","type":"/Loading Spinner","parameters":{},"ports":[],"children":[]},{"id":"753fb7f8-6610-6d34-acd0-d1252c2bd236","type":"JavaScriptFunction","parameters":{"functionScript":"const _id = Inputs.id || null;\r\nconst userid = Inputs.userid || null;\r\nconst firstname = Inputs.firstname || null;\r\nconst lastname = Inputs.lastname || null;\r\nconst officeid = Inputs.officeid || null;\r\nconst is_PhD = Inputs.is_PhD;\r\nconst isFaculty = Inputs.isFaculty || null; //check if the check box was checked\r\n\r\ntry {\r\n    const profileData = {\r\n        id: _id,\r\n        user_id: userid,\r\n        first_name: firstname,\r\n        last_name: lastname,\r\n        is_phd: is_PhD\r\n    };\r\n\r\n    Object.keys(profileData).forEach(key => {\r\n        if (profileData[key] === null) {\r\n            delete profileData[key];\r\n        }\r\n    });\r\n\r\n    if (isFaculty) {\r\n        profileData.dep_id = officeid;\r\n        profileData.off_id = null;\r\n    } else {\r\n        profileData.off_id = officeid;\r\n        profileData.dep_id = null;\r\n    }\r\n\r\n    const { data, error } = await Noodl.Variables.supabase\r\n        .from('profiles')\r\n        .upsert([profileData])\r\n        .select();\r\n\r\n    if (error) {\r\n        console.log(\"Error Upserting Profile: \", error);\r\n        Outputs.Failure();\r\n    } else {\r\n        console.log(\"Profile Upserted Successfully\");\r\n        Outputs.Success();\r\n    }\r\n} catch (e) {\r\n    console.log(\"ERROR ADDING NEW USER PROFILE\", e);\r\n    Outputs.Failure();\r\n}\r\n"},"ports":[{"name":"in-id","displayName":"id","plug":"input","type":"*","group":"Inputs","index":4},{"name":"in-userid","displayName":"userid","plug":"input","type":"*","group":"Inputs","index":5},{"name":"in-firstname","displayName":"firstname","plug":"input","type":"*","group":"Inputs","index":6},{"name":"in-lastname","displayName":"lastname","plug":"input","type":"*","group":"Inputs","index":7},{"name":"in-officeid","displayName":"officeid","plug":"input","type":"*","group":"Inputs","index":8},{"name":"in-is_PhD","displayName":"is_PhD","plug":"input","type":"*","group":"Inputs","index":9},{"name":"in-isFaculty","displayName":"isFaculty","plug":"input","type":"*","group":"Inputs","index":10},{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":11},{"name":"out-Failure","displayName":"Failure","plug":"output","type":"signal","group":"Outputs","index":12}],"children":[]},{"id":"6c4758c6-213c-f6a9-db0a-a808c62637dc","type":"RouterNavigate","parameters":{"router":"Logged_in_main_panel","target":"/Update Profile Loggedin"},"ports":[],"children":[]},{"id":"4cab061a-6525-4d6f-b877-f8f2e2468899","type":"/#Supabase Prefab/Supabase Prefab/UI/User/Supabase - Fetch Current User Profile Data","parameters":{},"ports":[],"children":[]}],"connections":[{"sourceId":"95d85871-ef77-8494-7b70-f151e4a4fd30","sourcePort":"out-JsonArray","targetId":"5df2be93-7dee-f634-8b60-573e15a69468","targetPort":"items"},{"sourceId":"8f789976-7ad9-05b0-cf18-d0797a40dd5a","sourcePort":"onChange","targetId":"a84e0a2b-688a-5b2c-c623-a39610765ea1","targetPort":"eval"},{"sourceId":"8f789976-7ad9-05b0-cf18-d0797a40dd5a","sourcePort":"checked","targetId":"a84e0a2b-688a-5b2c-c623-a39610765ea1","targetPort":"condition"},{"sourceId":"a84e0a2b-688a-5b2c-c623-a39610765ea1","sourcePort":"ontrue","targetId":"c67acab4-0fe1-f34c-6bf6-e2684f0d4a89","targetPort":"run"},{"sourceId":"a84e0a2b-688a-5b2c-c623-a39610765ea1","sourcePort":"onfalse","targetId":"95d85871-ef77-8494-7b70-f151e4a4fd30","targetPort":"run"},{"sourceId":"c67acab4-0fe1-f34c-6bf6-e2684f0d4a89","sourcePort":"out-JsonArray","targetId":"5df2be93-7dee-f634-8b60-573e15a69468","targetPort":"items"},{"sourceId":"08392544-80e8-bfc5-8a43-c1e66b3388be","sourcePort":"didMount","targetId":"95d85871-ef77-8494-7b70-f151e4a4fd30","targetPort":"run"},{"sourceId":"08392544-80e8-bfc5-8a43-c1e66b3388be","sourcePort":"didMount","targetId":"9ee01d33-5de3-0a8a-ea98-d8d4918fe5c8","targetPort":"Show"},{"sourceId":"95d85871-ef77-8494-7b70-f151e4a4fd30","sourcePort":"out-Success","targetId":"9ee01d33-5de3-0a8a-ea98-d8d4918fe5c8","targetPort":"Hide"},{"sourceId":"8f789976-7ad9-05b0-cf18-d0797a40dd5a","sourcePort":"onChange","targetId":"9ee01d33-5de3-0a8a-ea98-d8d4918fe5c8","targetPort":"Show"},{"sourceId":"c67acab4-0fe1-f34c-6bf6-e2684f0d4a89","sourcePort":"out-Success","targetId":"9ee01d33-5de3-0a8a-ea98-d8d4918fe5c8","targetPort":"Hide"},{"sourceId":"a794d407-e382-20ae-f926-8f1d74fd3939","sourcePort":"onClick","targetId":"9ee01d33-5de3-0a8a-ea98-d8d4918fe5c8","targetPort":"Show"},{"sourceId":"a4352b25-1316-a1bd-203a-9c66bab96888","sourcePort":"id","targetId":"753fb7f8-6610-6d34-acd0-d1252c2bd236","targetPort":"in-id"},{"sourceId":"e8a69535-bebd-3859-e91e-bfeccbdad42d","sourcePort":"onTextChanged","targetId":"753fb7f8-6610-6d34-acd0-d1252c2bd236","targetPort":"in-userid"},{"sourceId":"bef1b0d2-a4a4-01a8-8a36-11f76f5e3bd8","sourcePort":"onTextChanged","targetId":"753fb7f8-6610-6d34-acd0-d1252c2bd236","targetPort":"in-firstname"},{"sourceId":"1a5fd9c8-aa63-aaef-50a8-cbd12c44f8d4","sourcePort":"onTextChanged","targetId":"753fb7f8-6610-6d34-acd0-d1252c2bd236","targetPort":"in-lastname"},{"sourceId":"8f789976-7ad9-05b0-cf18-d0797a40dd5a","sourcePort":"checked","targetId":"753fb7f8-6610-6d34-acd0-d1252c2bd236","targetPort":"in-isFaculty"},{"sourceId":"f8b2cae1-04f0-e56b-af53-20c7c14e62f0","sourcePort":"checked","targetId":"753fb7f8-6610-6d34-acd0-d1252c2bd236","targetPort":"in-is_PhD"},{"sourceId":"5df2be93-7dee-f634-8b60-573e15a69468","sourcePort":"value","targetId":"753fb7f8-6610-6d34-acd0-d1252c2bd236","targetPort":"in-officeid"},{"sourceId":"a794d407-e382-20ae-f926-8f1d74fd3939","sourcePort":"onClick","targetId":"753fb7f8-6610-6d34-acd0-d1252c2bd236","targetPort":"run"},{"sourceId":"753fb7f8-6610-6d34-acd0-d1252c2bd236","sourcePort":"out-Success","targetId":"9ee01d33-5de3-0a8a-ea98-d8d4918fe5c8","targetPort":"Hide"},{"sourceId":"753fb7f8-6610-6d34-acd0-d1252c2bd236","sourcePort":"out-Failure","targetId":"9ee01d33-5de3-0a8a-ea98-d8d4918fe5c8","targetPort":"Hide"},{"sourceId":"753fb7f8-6610-6d34-acd0-d1252c2bd236","sourcePort":"out-Success","targetId":"6c4758c6-213c-f6a9-db0a-a808c62637dc","targetPort":"navigate"},{"sourceId":"c716058d-431f-66aa-4bfc-79a9aa9df671","sourcePort":"prop-profile","targetId":"a4352b25-1316-a1bd-203a-9c66bab96888","targetPort":"modelId"},{"sourceId":"a4352b25-1316-a1bd-203a-9c66bab96888","sourcePort":"prop-first_name","targetId":"bef1b0d2-a4a4-01a8-8a36-11f76f5e3bd8","targetPort":"placeholder"},{"sourceId":"a4352b25-1316-a1bd-203a-9c66bab96888","sourcePort":"prop-user_id","targetId":"e8a69535-bebd-3859-e91e-bfeccbdad42d","targetPort":"placeholder"},{"sourceId":"a4352b25-1316-a1bd-203a-9c66bab96888","sourcePort":"prop-last_name","targetId":"1a5fd9c8-aa63-aaef-50a8-cbd12c44f8d4","targetPort":"placeholder"},{"sourceId":"a4352b25-1316-a1bd-203a-9c66bab96888","sourcePort":"prop-is_phd","targetId":"f8b2cae1-04f0-e56b-af53-20c7c14e62f0","targetPort":"checked"},{"sourceId":"08392544-80e8-bfc5-8a43-c1e66b3388be","sourcePort":"didMount","targetId":"4cab061a-6525-4d6f-b877-f8f2e2468899","targetPort":"Do"}],"ports":[],"roots":["08392544-80e8-bfc5-8a43-c1e66b3388be"]}]