[{"name":"/Update Profile","nodes":[{"id":"749a37af-a1c2-0739-65d9-bfd3c96ce71a","type":"Page","parameters":{},"ports":[],"children":[{"id":"615260fb-bdce-3e44-5fe3-b0a0364c8399","type":"Group","parameters":{},"ports":[],"children":[{"id":"d9035dbc-4e5d-0d3f-2fe6-f1d8338105a4","type":"Group","parameters":{"marginLeft":{"value":24,"unit":"px"},"marginRight":{"value":24,"unit":"px"},"marginTop":{"value":24,"unit":"px"}},"ports":[],"children":[{"id":"8fb4787c-01e7-5c4e-ac9c-9a198b4b9148","type":"net.noodl.visual.columns","parameters":{"justifyContent":"center","minWidth":{"value":320,"unit":"px"}},"ports":[],"children":[{"id":"733f7477-8d4f-7bdb-9ccf-0bf38d22979f","type":"Group","parameters":{"paddingLeft":{"value":24,"unit":"px"},"paddingRight":{"value":24,"unit":"px"},"paddingTop":{"value":24,"unit":"px"},"paddingBottom":{"value":24,"unit":"px"},"backgroundColor":"Main Blue","borderRadius":{"value":5,"unit":"px"},"borderStyle":"solid","borderWidth":{"value":1,"unit":"px"},"borderColor":"Depressive Blue","sizeMode":"explicit"},"ports":[],"children":[{"id":"26f51b11-ac25-6fe5-7448-b85359d626ea","type":"net.noodl.controls.textinput","parameters":{"label":"ID Number","type":"number","placeholder":"####","sizeMode":"explicit","backgroundColor":"Deep Blue","color":"Selection Yellow","labelcolor":"White","borderColor":"Depressive Blue","marginTop":{"value":8,"unit":"px"}},"ports":[],"children":[]},{"id":"858503cc-d794-8406-dd0c-042fd3752625","type":"Group","parameters":{"flexDirection":"row","sizeMode":"explicit"},"ports":[],"children":[{"id":"26be4934-be75-4889-b327-bb2dc8e0d1e4","type":"net.noodl.visual.columns","parameters":{"layoutString":"1 1","justifyContent":"center"},"ports":[],"children":[{"id":"9ad4f02f-f280-fbee-efb4-a1e509a814fd","type":"net.noodl.controls.textinput","parameters":{"label":"First Name","type":"text","placeholder":"John Doe","sizeMode":"explicit","backgroundColor":"Deep Blue","color":"Selection Yellow","labelcolor":"White","borderColor":"Depressive Blue","marginTop":{"value":8,"unit":"px"}},"ports":[],"children":[]},{"id":"eaaf8f60-3b9d-7343-9634-bd4e013db8a6","type":"net.noodl.controls.textinput","parameters":{"label":"Last Name","type":"text","placeholder":"Johnsson","sizeMode":"explicit","backgroundColor":"Deep Blue","color":"Selection Yellow","labelcolor":"White","borderColor":"Depressive Blue","marginTop":{"value":8,"unit":"px"}},"ports":[],"children":[]}]}]},{"id":"175fb7d2-63dc-dd70-b3e6-612ed58bc84e","type":"Group","parameters":{"flexDirection":"row"},"ports":[],"children":[{"id":"8f5c0069-e910-c05b-ab6b-f6165b0c2cd1","type":"net.noodl.controls.checkbox","parameters":{"marginTop":{"value":24,"unit":"px"},"label":"Are you Faculty?","labelcolor":"Selection Yellow","borderColor":"Depressive Blue"},"ports":[],"children":[]},{"id":"4ee05b93-67eb-bb81-c682-015ccd2070cd","type":"net.noodl.controls.checkbox","parameters":{"marginTop":{"value":24,"unit":"px"},"label":"Do you have a PhD?","labelcolor":"Selection Yellow","borderColor":"Depressive Blue"},"ports":[],"children":[]}]},{"id":"711b4c04-ef2e-84a6-dc37-6e0ba51d7888","type":"Group","parameters":{"flexDirection":"row"},"ports":[],"children":[{"id":"a21e153b-697c-c5ae-4425-9af86642aa3f","type":"net.noodl.controls.options","parameters":{"color":"Selection Yellow","borderColor":"Depressive Blue","placeholder":"Select Office Location","labelcolor":"White","label":"Select Office","sizeMode":"explicit","width":{"value":100,"unit":"%","isFixed":false},"iconColor":"Grey - 600","items":"[\n\n]","textTransform":"none","fontSize":{"value":16,"unit":"px"},"height":{"value":55,"unit":"px"},"marginTop":{"value":24,"unit":"px"},"backgroundColor":"Not-so Deep Blue","marginLeft":{"value":0,"unit":"px"},"marginRight":{"value":0,"unit":"px"}},"ports":[],"children":[]}]},{"id":"38f7814d-1170-79a3-beaf-b55e8278ddce","type":"net.noodl.controls.button","parameters":{"marginTop":{"value":24,"unit":"px"},"sizeMode":"explicit","label":"Finish Signing up","backgroundColor":"Not-so Deep Blue","borderStyle":"solid","borderColor":"Depressive Blue","borderWidth":{"value":1,"unit":"px"}},"ports":[],"children":[]}]}]}]}]}]},{"id":"4e003d2f-b669-9abb-bc47-ed8dce9fcc11","type":"PageInputs","parameters":{},"ports":[],"children":[]},{"id":"6ae132db-63e5-7f1b-3d81-0af7173c1ee7","type":"JavaScriptFunction","parameters":{"functionScript":"try {\r\n  // Retrieve records from the 'categories' table\r\n  const {data, error} = await Noodl.Variables.supabaselocal.from('office')\r\n  .select('id, desc'); // Retrieve records from the 'categories' table\r\n\r\n  // Create a JSON array to store the rows\r\n  const jsonArray = [];\r\n\r\n  // Iterate through the rows and assign 'desc' to 'Label' and 'id' to 'Value'\r\n  data.forEach(row => {\r\n    const jsonRow = {\r\n      Label: row.desc,\r\n      Value: row.id\r\n    };\r\n    jsonArray.push(jsonRow);\r\n  });\r\n\r\n  // Output the JSON array\r\n  Outputs.JsonArray = jsonArray;\r\n  Outputs.label = \"Select Office\";\r\n  Outputs.IsDone = true;\r\n  Outputs.Success();\r\n\r\n  \r\n} catch (error) {\r\n  console.log(\"getActivities: ERROR : \", error);\r\n  Outputs.Error = error;\r\n  Outputs.IsDone = false;\r\n  Outputs.Failure();\r\n  return;\r\n}\r\n"},"ports":[{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":4},{"name":"out-Failure","displayName":"Failure","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-JsonArray","displayName":"JsonArray","plug":"output","type":"*","group":"Outputs","index":6},{"name":"out-label","displayName":"label","plug":"output","type":"*","group":"Outputs","index":7},{"name":"out-IsDone","displayName":"IsDone","plug":"output","type":"*","group":"Outputs","index":8},{"name":"out-Error","displayName":"Error","plug":"output","type":"*","group":"Outputs","index":9}],"children":[]},{"id":"e45c430c-f43b-f966-ceaa-7db4a23c2d4f","type":"JavaScriptFunction","parameters":{"functionScript":"try {\r\n  // Retrieve records from the 'categories' table\r\n  const {data, error} = await Noodl.Variables.supabaselocal.from('department')\r\n  .select('id, desc'); // Retrieve records from the 'categories' table\r\n\r\n  // Create a JSON array to store the rows\r\n  const jsonArray = [];\r\n\r\n  // Iterate through the rows and assign 'desc' to 'Label' and 'id' to 'Value'\r\n  data.forEach(row => {\r\n    const jsonRow = {\r\n      Label: row.desc,\r\n      Value: row.id\r\n    };\r\n    jsonArray.push(jsonRow);\r\n  });\r\n\r\n  // Output the JSON array\r\n  Outputs.JsonArray = jsonArray;\r\n  Outputs.label = \"Select School\";\r\n  Outputs.IsDone = true;\r\n  Outputs.Success();\r\n\r\n  \r\n} catch (error) {\r\n  console.log(\"getActivities: ERROR : \", error);\r\n  Outputs.Error = error;\r\n  Outputs.IsDone = false;\r\n  Outputs.Failure();\r\n  return;\r\n}\r\n"},"ports":[{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":4},{"name":"out-Failure","displayName":"Failure","plug":"output","type":"signal","group":"Outputs","index":5},{"name":"out-JsonArray","displayName":"JsonArray","plug":"output","type":"*","group":"Outputs","index":6},{"name":"out-label","displayName":"label","plug":"output","type":"*","group":"Outputs","index":7},{"name":"out-IsDone","displayName":"IsDone","plug":"output","type":"*","group":"Outputs","index":8},{"name":"out-Error","displayName":"Error","plug":"output","type":"*","group":"Outputs","index":9}],"children":[]},{"id":"65abd86f-84b1-1942-34dd-e0d38f1ac14e","type":"Condition","parameters":{},"ports":[],"children":[]},{"id":"d98f74e7-3dce-b63a-3264-3552c0ee102e","type":"Model2","parameters":{"modelId":"currentSignee1","properties":"user"},"ports":[],"children":[]},{"id":"48f8332d-b76e-9ab2-85e5-02402e7f2554","type":"Model2","parameters":{},"ports":[],"children":[]},{"id":"003d611c-0337-88aa-f00b-21581c60aa18","type":"/Loading Spinner","parameters":{},"ports":[],"children":[]},{"id":"287b030a-310f-0d71-2384-3b0c4f0df086","type":"JavaScriptFunction","parameters":{"functionScript":"const _id = Inputs.id;\r\nconst userid = Inputs.userid;\r\nconst firstname = Inputs.firstname;\r\nconst lastname = Inputs.lastname;\r\nconst officeid = Inputs.officeid;\r\nconst is_PhD = Inputs.is_PhD;\r\nconst isFaculty = Inputs.isFaculty; //check if the check box was checked\r\n\r\ntry {\r\n    if (isFaculty){\r\n\r\n        \r\n        const { data, error } = await Noodl.Variables.supabase\r\n        .from('profiles')\r\n        .upsert([\r\n            {\r\n                id: _id, \r\n                user_id: userid, \r\n                first_name: firstname, \r\n                last_name: lastname, \r\n                dep_id: officeid, \r\n                is_phd: is_PhD\r\n            }, \r\n        ])\r\n        .select()\r\n        console.log(\"Error Upserting Profile: \", error);\r\n        Outputs.Success();\r\n    } else {\r\n        const { data, error } = await Noodl.Variables.supabase\r\n        .from('profiles')\r\n        .upsert([\r\n            {\r\n                id: _id, \r\n                user_id: userid, \r\n                first_name: firstname, \r\n                last_name: lastname, \r\n                off_id: officeid, \r\n                is_phd: is_PhD\r\n            }, \r\n        ])\r\n        .select()\r\n        console.log(\"Error Upserting Profile: \", error);\r\n        Outputs.Success();\r\n\r\n    }\r\n} catch (e) {\r\n    console.log(\"ERROR ADDING NEW USER PROFILE\", e);\r\n    Outputs.Failure()\r\n}\r\n\r\n"},"ports":[{"name":"in-id","displayName":"id","plug":"input","type":"*","group":"Inputs","index":4},{"name":"in-userid","displayName":"userid","plug":"input","type":"*","group":"Inputs","index":5},{"name":"in-firstname","displayName":"firstname","plug":"input","type":"*","group":"Inputs","index":6},{"name":"in-lastname","displayName":"lastname","plug":"input","type":"*","group":"Inputs","index":7},{"name":"in-officeid","displayName":"officeid","plug":"input","type":"*","group":"Inputs","index":8},{"name":"in-is_PhD","displayName":"is_PhD","plug":"input","type":"*","group":"Inputs","index":9},{"name":"in-isFaculty","displayName":"isFaculty","plug":"input","type":"*","group":"Inputs","index":10},{"name":"out-Success","displayName":"Success","plug":"output","type":"signal","group":"Outputs","index":11},{"name":"out-Failure","displayName":"Failure","plug":"output","type":"signal","group":"Outputs","index":12}],"children":[]},{"id":"965b95f6-51d7-1e9d-bdc2-863d91ab00aa","type":"RouterNavigate","parameters":{"router":"Supabase Not Logged In Router","target":"/#Supabase Prefab/Supabase Prefab/Pages/Log in"},"ports":[],"children":[]}],"connections":[{"sourceId":"6ae132db-63e5-7f1b-3d81-0af7173c1ee7","sourcePort":"out-JsonArray","targetId":"a21e153b-697c-c5ae-4425-9af86642aa3f","targetPort":"items"},{"sourceId":"8f5c0069-e910-c05b-ab6b-f6165b0c2cd1","sourcePort":"onChange","targetId":"65abd86f-84b1-1942-34dd-e0d38f1ac14e","targetPort":"eval"},{"sourceId":"8f5c0069-e910-c05b-ab6b-f6165b0c2cd1","sourcePort":"checked","targetId":"65abd86f-84b1-1942-34dd-e0d38f1ac14e","targetPort":"condition"},{"sourceId":"65abd86f-84b1-1942-34dd-e0d38f1ac14e","sourcePort":"ontrue","targetId":"e45c430c-f43b-f966-ceaa-7db4a23c2d4f","targetPort":"run"},{"sourceId":"65abd86f-84b1-1942-34dd-e0d38f1ac14e","sourcePort":"onfalse","targetId":"6ae132db-63e5-7f1b-3d81-0af7173c1ee7","targetPort":"run"},{"sourceId":"e45c430c-f43b-f966-ceaa-7db4a23c2d4f","sourcePort":"out-JsonArray","targetId":"a21e153b-697c-c5ae-4425-9af86642aa3f","targetPort":"items"},{"sourceId":"d98f74e7-3dce-b63a-3264-3552c0ee102e","sourcePort":"prop-user","targetId":"48f8332d-b76e-9ab2-85e5-02402e7f2554","targetPort":"modelId"},{"sourceId":"749a37af-a1c2-0739-65d9-bfd3c96ce71a","sourcePort":"didMount","targetId":"6ae132db-63e5-7f1b-3d81-0af7173c1ee7","targetPort":"run"},{"sourceId":"749a37af-a1c2-0739-65d9-bfd3c96ce71a","sourcePort":"didMount","targetId":"003d611c-0337-88aa-f00b-21581c60aa18","targetPort":"Show"},{"sourceId":"6ae132db-63e5-7f1b-3d81-0af7173c1ee7","sourcePort":"out-Success","targetId":"003d611c-0337-88aa-f00b-21581c60aa18","targetPort":"Hide"},{"sourceId":"8f5c0069-e910-c05b-ab6b-f6165b0c2cd1","sourcePort":"onChange","targetId":"003d611c-0337-88aa-f00b-21581c60aa18","targetPort":"Show"},{"sourceId":"e45c430c-f43b-f966-ceaa-7db4a23c2d4f","sourcePort":"out-Success","targetId":"003d611c-0337-88aa-f00b-21581c60aa18","targetPort":"Hide"},{"sourceId":"38f7814d-1170-79a3-beaf-b55e8278ddce","sourcePort":"onClick","targetId":"003d611c-0337-88aa-f00b-21581c60aa18","targetPort":"Show"},{"sourceId":"48f8332d-b76e-9ab2-85e5-02402e7f2554","sourcePort":"id","targetId":"287b030a-310f-0d71-2384-3b0c4f0df086","targetPort":"in-id"},{"sourceId":"26f51b11-ac25-6fe5-7448-b85359d626ea","sourcePort":"onTextChanged","targetId":"287b030a-310f-0d71-2384-3b0c4f0df086","targetPort":"in-userid"},{"sourceId":"9ad4f02f-f280-fbee-efb4-a1e509a814fd","sourcePort":"onTextChanged","targetId":"287b030a-310f-0d71-2384-3b0c4f0df086","targetPort":"in-firstname"},{"sourceId":"eaaf8f60-3b9d-7343-9634-bd4e013db8a6","sourcePort":"onTextChanged","targetId":"287b030a-310f-0d71-2384-3b0c4f0df086","targetPort":"in-lastname"},{"sourceId":"8f5c0069-e910-c05b-ab6b-f6165b0c2cd1","sourcePort":"checked","targetId":"287b030a-310f-0d71-2384-3b0c4f0df086","targetPort":"in-isFaculty"},{"sourceId":"4ee05b93-67eb-bb81-c682-015ccd2070cd","sourcePort":"checked","targetId":"287b030a-310f-0d71-2384-3b0c4f0df086","targetPort":"in-is_PhD"},{"sourceId":"a21e153b-697c-c5ae-4425-9af86642aa3f","sourcePort":"value","targetId":"287b030a-310f-0d71-2384-3b0c4f0df086","targetPort":"in-officeid"},{"sourceId":"38f7814d-1170-79a3-beaf-b55e8278ddce","sourcePort":"onClick","targetId":"287b030a-310f-0d71-2384-3b0c4f0df086","targetPort":"run"},{"sourceId":"287b030a-310f-0d71-2384-3b0c4f0df086","sourcePort":"out-Success","targetId":"003d611c-0337-88aa-f00b-21581c60aa18","targetPort":"Hide"},{"sourceId":"287b030a-310f-0d71-2384-3b0c4f0df086","sourcePort":"out-Failure","targetId":"003d611c-0337-88aa-f00b-21581c60aa18","targetPort":"Hide"},{"sourceId":"287b030a-310f-0d71-2384-3b0c4f0df086","sourcePort":"out-Success","targetId":"965b95f6-51d7-1e9d-bdc2-863d91ab00aa","targetPort":"navigate"}],"ports":[],"roots":["749a37af-a1c2-0739-65d9-bfd3c96ce71a"]}]